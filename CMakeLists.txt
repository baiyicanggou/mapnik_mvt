CMAKE_MINIMUM_REQUIRED(VERSION 3.1.3)

PROJECT(flywave-mapnik C CXX)

# Set build type
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

OPTION(FLYWAVE_ENABLE_SOLUTION_FOLDERS "Build with UBSAN" ON)

if(FLYWAVE_ENABLE_SOLUTION_FOLDERS)
  SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
  SET_PROPERTY(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "CMakeTargets")
endif()

# Set output directories
SET(FLYWAVE_LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/libs)

MAKE_DIRECTORY(${FLYWAVE_LIBRARY_OUTPUT_PATH})

SET(FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}")
SET(FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}")

# boost
IF(UNIX)
IF(NOT BOOST_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/libboost")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libboost/boost_1_67_0")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "boost_regex_internal" "boost_program_options_internal" "boost_date_time_internal" "boost_filesystem_internal" "boost_system_internal")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/libboost/")
  SET(BOOST_INCLUDE YES)
ENDIF()
ENDIF()

# iconv
IF(NOT ICONV_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/libiconv/")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libiconv/include")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/libiconv/src")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "iconv")
  SET(ICONV_INCLUDE YES)
ENDIF()

# freetype2
IF(NOT FREETYPE_INCLUDE)

  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/freetype2")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/freetype2/include/")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/freetype2/src/include/")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/freetype2/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "freetype")
  SET(FREETYPE_INCLUDE YES)
ENDIF()

# harfbuzz
IF(NOT HARFBUZZ_INCLUDE)

  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/harfbuzz")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/harfbuzz/include/")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/harfbuzz/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "harfbuzz")
  SET(HARFBUZZ_INCLUDE YES)
ENDIF()

# libjpeg
IF(NOT JPEG_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/libjpeg")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libjpeg")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/libjpeg/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "jpeg")
  SET(JPEG_INCLUDE YES)
ENDIF()

# libpng
IF(NOT PNG_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/libpng")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libpng")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/libpng/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "png")
  SET(PNG_INCLUDE YES)
ENDIF()

# webp
IF(NOT WEBP_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/webp")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/webp/include")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/webp/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "webp")
  SET(WEBP_INCLUDE YES)
ENDIF()

# libexpat
IF(NOT EXPAT_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/libexpat")
  IF (WIN32)
    LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libexpat/arch/win")
  ELSE()
    LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libexpat/arch/unix")
  ENDIF()

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libexpat/expat/lib")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/libexpat/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "expat")
  SET(EXPAT_INCLUDE YES)
ENDIF()

# icu
IF(NOT ICU_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/icu")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/icu/source/common/")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/icu/source/i18n/")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/icu/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "icudata" "icui18n" "icuuc" "icudt")
  SET(ICU_INCLUDE YES)
ENDIF()

# xml2
IF(NOT XML2_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/libxml")
  IF (WIN32)
    LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libxml/win32
                                      ${CMAKE_CURRENT_SOURCE_DIR}/external/libxml/win32/include")
  ENDIF()

  IF(UNIX)
  IF(APPLE)
    LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libxml/mac
                                      ${CMAKE_CURRENT_SOURCE_DIR}/external/libxml/mac/include")
  ELSE()
    LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libxml/linux
                                      ${CMAKE_CURRENT_SOURCE_DIR}/external/libxml/linux/include")
  ENDIF()
  ENDIF()
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libxml/src/include/")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/libxml/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "xml2")
  SET(XML2_INCLUDE YES)
ENDIF()

# libproj
IF(NOT PROJ_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/libproj")
  IF (WIN32)
    LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libproj/arch/win/src")
  ELSE()
    LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libproj/arch/unix/src")
  ENDIF()

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/libproj/proj/src")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/libproj/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "proj")
  SET(PROJ_INCLUDE YES)
ENDIF()

# zlib
IF(NOT ZLIB_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/zlib")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/zlib/")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/zlib/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "zlib")
  SET(ZLIB_INCLUDE YES)
ENDIF()

# mapnik
IF(NOT MAPNIK_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik/include")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik/include/mapnik/util")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik/deps")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik/deps/agg/include")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik/deps/mapbox/variant/include")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik/deps/mapbox/variant/include/mapbox")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "mapnik")

  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik/vector_tile")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik/vector_tile/src")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik/vector_tile/geometry/include")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/mapnik/vector_tile/protozero/include")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/mapnik/")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/mapnik/vector_tile/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "mapnik_vector_tile")
  SET(MAPNIK_INCLUDE YES)
ENDIF()

# fontconfig
IF(NOT FC_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/fontconfig/")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/fontconfig/include/")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/fontconfig/include/src/")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/fontconfig/src/")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/fontconfig/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "fontconfig")
  SET(FC_INCLUDE YES)
ENDIF()

# pixman
IF(NOT PIXMAN_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/pixman/")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/pixman/pixman/")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/pixman/pixman/")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/pixman/pixman/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "pixman")
  SET(PIXMAN_INCLUDE YES)
ENDIF()

# cairo
IF(NOT CAIRO_INCLUDE)
  ADD_SUBDIRECTORY("${CMAKE_CURRENT_SOURCE_DIR}/external/cairo/")

  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/external/cairo/")
  LIST(APPEND FLYWAVE_INCLUDE_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/cairo/")
  LIST(APPEND FLYWAVE_LIBRARY_DIRS "${CMAKE_CURRENT_BINARY_DIR}/external/cairo/src/")
  LIST(APPEND FLYWAVE_LIBRARY_DEPES "cairo")
  SET(CAIRO_INCLUDE YES)
ENDIF()

Message("${LIBDIR} ${FLYWAVE_LIBRARY_OUTPUT_PATH}")
foreach(LIBDIR ${FLYWAVE_LIBRARY_DIRS})
  INSTALL(
        DIRECTORY ${LIBDIR}
        DESTINATION ${FLYWAVE_LIBRARY_OUTPUT_PATH}
        USE_SOURCE_PERMISSIONS FILE_PERMISSIONS
        FILES_MATCHING PATTERN "*.a"
        )
  endforeach()